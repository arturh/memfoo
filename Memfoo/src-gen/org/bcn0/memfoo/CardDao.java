package org.bcn0.memfoo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import org.bcn0.memfoo.Card;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CARD.
*/
public class CardDao extends AbstractDao<Card, Long> {

    public static final String TABLENAME = "CARD";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Kanji = new Property(1, String.class, "kanji", false, "KANJI");
        public final static Property Kana = new Property(2, String.class, "kana", false, "KANA");
        public final static Property Meaning = new Property(3, String.class, "meaning", false, "MEANING");
        public final static Property Audio = new Property(4, String.class, "audio", false, "AUDIO");
        public final static Property Due = new Property(5, java.util.Date.class, "due", false, "DUE");
        public final static Property Introduced = new Property(6, java.util.Date.class, "introduced", false, "INTRODUCED");
        public final static Property Correct = new Property(7, Integer.class, "correct", false, "CORRECT");
        public final static Property Lesson = new Property(8, String.class, "lesson", false, "LESSON");
    };


    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'CARD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'KANJI' TEXT," + // 1: kanji
                "'KANA' TEXT," + // 2: kana
                "'MEANING' TEXT," + // 3: meaning
                "'AUDIO' TEXT," + // 4: audio
                "'DUE' INTEGER," + // 5: due
                "'INTRODUCED' INTEGER," + // 6: introduced
                "'CORRECT' INTEGER," + // 7: correct
                "'LESSON' TEXT);"; // 8: lesson
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CARD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String kanji = entity.getKanji();
        if (kanji != null) {
            stmt.bindString(2, kanji);
        }
 
        String kana = entity.getKana();
        if (kana != null) {
            stmt.bindString(3, kana);
        }
 
        String meaning = entity.getMeaning();
        if (meaning != null) {
            stmt.bindString(4, meaning);
        }
 
        String audio = entity.getAudio();
        if (audio != null) {
            stmt.bindString(5, audio);
        }
 
        java.util.Date due = entity.getDue();
        if (due != null) {
            stmt.bindLong(6, due.getTime());
        }
 
        java.util.Date introduced = entity.getIntroduced();
        if (introduced != null) {
            stmt.bindLong(7, introduced.getTime());
        }
 
        Integer correct = entity.getCorrect();
        if (correct != null) {
            stmt.bindLong(8, correct);
        }
 
        String lesson = entity.getLesson();
        if (lesson != null) {
            stmt.bindString(9, lesson);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Card readEntity(Cursor cursor, int offset) {
        Card entity = new Card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // kanji
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kana
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // meaning
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // audio
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // due
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // introduced
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // correct
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // lesson
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Card entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKanji(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKana(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMeaning(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAudio(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDue(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setIntroduced(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setCorrect(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLesson(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected Long updateKeyAfterInsert(Card entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Card entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
